#!/bin/bash

# Default variables (can be overridden)
PACKAGE_NAME="${PACKAGE_NAME:-jellyfin}"
DOCKER_IMAGE="${DOCKER_IMAGE:-jellyfin/jellyfin:10.8.10}"

# Unified logging functions
log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [INFO] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
}
warn_log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [WARN] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t1 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
}
err_log() {
    local MESSAGE="$(date '+%Y-%m-%d %H:%M:%S') [ERROR] $*"
    echo "$MESSAGE"
    /sbin/log_tool -t2 -uSystem -p127.0.0.1 -mlocalhost -a "$MESSAGE"
    exit 1
}

no_op() {
    log "No operation specified. Running a placeholder function."
}

detect_primary_volume() {
    PRIMARY_VOLUME=$(getcfg SHARE_DEF defVolMP -d "" -f /etc/config/def_share.info)
    [ -z "$PRIMARY_VOLUME" ] && err_log "Primary volume not found. Exiting."
}

resolve_qpkg_path() {
    QPKG_DIR="${PRIMARY_VOLUME}/.qpkg"
    [ -L "$QPKG_DIR" ] && QPKG_DIR=$(readlink -f "$QPKG_DIR") || err_log "Failed to resolve .qpkg symlink."
    QPKG_PATH="${QPKG_DIR}/${PACKAGE_NAME}"
    CONFIG_DIR="${QPKG_PATH}/config"
}

verify_container_station() {
    [ ! -d "${PRIMARY_VOLUME}/.qpkg/container-station" ] && err_log "Container Station not installed."
}

prepare_directories() {
    mkdir -p "$QPKG_PATH" "$CONFIG_DIR" || err_log "Failed to create directories at $QPKG_PATH or $CONFIG_DIR."
    log "Directories prepared successfully."
}

detect_docker_binary() {
    CONTAINER_STATION_DIR=$(/sbin/getcfg container-station Install_Path -f /etc/config/qpkg.conf)
    DOCKER_PATH="${CONTAINER_STATION_DIR}/bin/docker"
    [ -z "$DOCKER_PATH" ] || [ ! -x "$DOCKER_PATH" ] && err_log "Docker binary not found or not executable."
    export PATH="$(dirname "$DOCKER_PATH"):$PATH"
}

detect_docker_compose() {
    detect_docker_binary
    ! "$DOCKER_PATH" compose version >/dev/null 2>&1 && err_log "docker compose not found. Install Docker Compose plugin."
}

create_all_mounts_file() {
    log "Creating all_mounts file"
    detect_primary_volume
    resolve_qpkg_path
    SMB_CONF="/etc/config/smb.conf"
    ALL_MOUNTS_FILE="${CONFIG_DIR}/all_mounts"
    [ ! -f "$SMB_CONF" ] && err_log "Missing smb.conf: $SMB_CONF"
    mkdir -p "$CONFIG_DIR" || err_log "Failed to create config dir: $CONFIG_DIR"
    > "$ALL_MOUNTS_FILE"
    grep "^\[" "$SMB_CONF" | sed 's/\[\(.*\)\]/\1/' | while read -r SHARE_NAME; do
        SHARE_PATH=$(/sbin/getcfg "$SHARE_NAME" path -f "$SMB_CONF")
        if [ -n "$SHARE_PATH" ] && [ -d "$SHARE_PATH" ]; then
            if [ -w "$SHARE_PATH" ]; then
                CONTAINER_PATH="/mnt/${SHARE_NAME}"
                echo "-v ${SHARE_PATH}:${CONTAINER_PATH}:rw" >> "$ALL_MOUNTS_FILE"
            else
                warn_log "Skipping read-only share: $SHARE_NAME ($SHARE_PATH)"
            fi
        else
            warn_log "Skipping invalid/missing share: $SHARE_NAME ($SHARE_PATH)"
        fi
    done
}

create_docker_compose_file() {
    create_all_mounts_file
    COMPOSE_FILE="${QPKG_PATH}/docker-compose.yml"
    cat > "$COMPOSE_FILE" <<EOF
version: "3.8"
services:
  ${PACKAGE_NAME}:
    image: ${DOCKER_IMAGE}
    container_name: ${PACKAGE_NAME}
    ports:
      - "8096:8096"
    volumes:
      - "${CONFIG_DIR}:/config"
EOF

    MOUNT_FILE="${CONFIG_DIR}/all_mounts"
    [ -f "$MOUNT_FILE" ] && while IFS= read -r LINE; do
        [[ $LINE == -v* ]] && echo "      - \"$(echo "$LINE" | sed 's/^-v //')\"" >> "$COMPOSE_FILE"
    done < "$MOUNT_FILE"

    log "Docker Compose file created at: $COMPOSE_FILE"
}

create_container() {
    log "Creating ${PACKAGE_NAME} container..."
    create_docker_compose_file
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" up -d || err_log "Failed to start ${PACKAGE_NAME} container."
    log "${PACKAGE_NAME} container started successfully."
}

pkg_install() {
    log "Installing ${PACKAGE_NAME}..."
    detect_primary_volume
    resolve_qpkg_path
    verify_container_station
    detect_docker_compose
    prepare_directories
    local PACKAGE_ROUTINES_SRC="$(dirname "$0")/package_routines"
    [ ! -f "$PACKAGE_ROUTINES_SRC" ] && err_log "Missing package_routines at $(dirname "$0")"
    cp "$PACKAGE_ROUTINES_SRC" "$QPKG_PATH" || err_log "Could not copy package_routines."
    "$DOCKER_PATH" pull "$DOCKER_IMAGE" || err_log "Docker pull failed for image $DOCKER_IMAGE"
    create_container
    pkg_start
}

pkg_post_install() {
    log "Post-installation for ${PACKAGE_NAME}..."
    resolve_qpkg_path
    /sbin/setcfg "$PACKAGE_NAME" depend_on "container-station" -f /etc/config/qpkg.conf
    /sbin/setcfg "$PACKAGE_NAME" Timeout "120,60" -f /etc/config/qpkg.conf
    /sbin/setcfg "$PACKAGE_NAME" Enable TRUE -f /etc/config/qpkg.conf
    log "Post-install complete."
}

pkg_start() {
    log "Starting ${PACKAGE_NAME}..."
    detect_primary_volume
    resolve_qpkg_path
    detect_docker_compose
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" up -d
    RUNNING_SERVICE=$("$DOCKER_PATH" compose -f "$DC_FILE" ps --services --filter "status=running" | grep -w "${PACKAGE_NAME}")
    [ -n "$RUNNING_SERVICE" ] && log "Container started." || err_log "Failed to start container."
}

pkg_stop() {
    log "Stopping ${PACKAGE_NAME}..."
    detect_docker_compose
    detect_primary_volume
    resolve_qpkg_path
    DC_FILE="${QPKG_PATH}/docker-compose.yml"
    "$DOCKER_PATH" compose -f "$DC_FILE" stop
    RUNNING_SERVICE=$("$DOCKER_PATH" compose -f "$DC_FILE" ps --services --filter "status=running" | grep -w "${PACKAGE_NAME}")
    [ -z "$RUNNING_SERVICE" ] && log "Container stopped." || err_log "Stop failed."
}

PKG_PRE_REMOVE="{
    PACKAGE_NAME=\"\${PACKAGE_NAME:-jellyfin}\"
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a '[INFO] PKG_PRE_REMOVE: Starting...'
    CONTAINER_STATION_DIR=\$(/sbin/getcfg container-station Install_Path -f /etc/config/qpkg.conf)
    DOCKER_PATH=\"\${CONTAINER_STATION_DIR}/bin/docker\"
    PRIMARY_VOLUME=\$(getcfg SHARE_DEF defVolMP -d '' -f /etc/config/def_share.info)
    QPKG_DIR=\"\${PRIMARY_VOLUME}/.qpkg/\${PACKAGE_NAME}\"
    DC_FILE=\"\${QPKG_DIR}/docker-compose.yml\"
    cd \"\$QPKG_DIR\" || exit 1
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a '[INFO] Stopping container...'
    OUTPUT=\$(\"\$DOCKER_PATH\" compose -f \"\$DC_FILE\" down 2>&1)
    /sbin/log_tool -t0 -uSystem -p127.0.0.1 -mlocalhost -a \"[INFO] docker compose down: \$OUTPUT\"
}"

# Main Entry Point
if [ -z "$1" ]; then
    set -- no_op
fi

case "$1" in
    install) pkg_install ;;
    start) pkg_start ;;
    stop) pkg_stop ;;
    no_op) no_op ;;
    *) err_log "Invalid action: $1. Use install, start, stop, or no_op." ;;
esac
